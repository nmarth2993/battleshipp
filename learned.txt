- polymorphism only works with pointers because without pointers, the object will be casted at compile-time
- you should never dereference the new operator immediately because it causes a leak since the derference copies
    the data and the pointer to the alloc'd memory is lost
- inheritance of member variables only works with protected access-specifier
- friend operator allows non-member methods to access protected or private data
- operator<< should return an ostream instance to allow chaining of operators
- never manually call destructors (will cause a double free), they are called automatically
- vector.emplace_back() scopes the data into the vector so that the data persists as long as the vector does
- note that const qualified methods are seen as having a completely separate header, so it is easy
    to overlook declaring a const method in the base class and defining a non-const method in the derived class
    the error passes silently because it will just use the base class method with no warning
- when exceptions are created on the stack to be thrown, they are copied to a special area as defined by the compiler so that
    the object may be deallocated even if the stack has been unwound. this is handled completely by the compiler.
    related, if you choose to throw new std::exception (allocate exception on heap), the catch clause must catch a std::exception*
    and assume responsibility for said pointer (must delete it before going out of scope, otherwise a memory leak will result)
    I mention throwing a heap-allocated exception only for completeness, as this is not a common practice and most catch clauses expect
    an exception reference.
